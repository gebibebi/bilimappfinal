import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  Trophy, 
  Users, 
  Clock, 
  Star, 
  Award, 
  Zap, 
  Smile, 
  Heart,
  XCircle,
  CheckCircle,
  HelpCircle,
  BookOpen,
  GraduationCap,
  FileText,
  Brain
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '../ui/Card';
import Button from '../ui/Button';
import useUserStore from '../../store/userStore';

// Mock opponents for fake online mode
const MOCK_OPPONENTS = [
  { id: 1, name: '–ê–ª–∏—è', avatar: 'üëß', level: 5, score: 0, grade: 9 },
  { id: 2, name: '–ê—Ä–º–∞–Ω', avatar: 'üë¶', level: 6, score: 0, grade: 10 },
  { id: 3, name: '–î–∞–º–∏—Ä', avatar: 'üë®', level: 4, score: 0, grade: 8 },
  { id: 4, name: '–ñ–∞–Ω–Ω–∞', avatar: 'üë©', level: 7, score: 0, grade: 11 }
];

// Define subject categories
const SUBJECTS = [
  { id: 'math', name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', icon: Brain, color: 'text-blue-600 bg-blue-100' },
  { id: 'physics', name: '–§–∏–∑–∏–∫–∞', icon: Zap, color: 'text-purple-600 bg-purple-100' },
  { id: 'biology', name: '–ë–∏–æ–ª–æ–≥–∏—è', icon: Heart, color: 'text-red-600 bg-red-100' },
  { id: 'history', name: '–ò—Å—Ç–æ—Ä–∏—è', icon: BookOpen, color: 'text-amber-600 bg-amber-100' },
  { id: 'kazakh', name: '–ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫', icon: FileText, color: 'text-green-600 bg-green-100' },
  { id: 'russian', name: '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', icon: FileText, color: 'text-indigo-600 bg-indigo-100' }
];

// Define ENT categories
const ENT_SUBJECTS = [
  { id: 'history_kz', name: '–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞', icon: BookOpen, color: 'text-amber-600 bg-amber-100' },
  { id: 'reading', name: '–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è', icon: FileText, color: 'text-indigo-600 bg-indigo-100' },
  { id: 'math_literacy', name: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å', icon: Brain, color: 'text-blue-600 bg-blue-100' }
];

// Mock questions database by subject and grade level
const getQuestions = (subject, grade, isENT = false) => {
  // ENT questions are fixed difficulty regardless of grade
  if (isENT) {
    switch (subject) {
      case 'history_kz':
        return [
          { 
            id: 1, 
            question: '–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º —Å—É–≤–µ—Ä–µ–Ω–∏—Ç–µ—Ç–µ –ö–∞–∑–∞—Ö—Å–∫–æ–π –°–°–†?',
            options: ['1989', '1990', '1991', '1992'],
            correctAnswer: '1990',
            explanation: '–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–º —Å—É–≤–µ—Ä–µ–Ω–∏—Ç–µ—Ç–µ –ö–∞–∑–∞—Ö—Å–∫–æ–π –°–°–† –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ 25 –æ–∫—Ç—è–±—Ä—è 1990 –≥–æ–¥–∞.'
          },
          { 
            id: 2, 
            question: '–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ 16 –¥–µ–∫–∞–±—Ä—è 1991 –≥–æ–¥–∞?',
            options: [
              '–ü—Ä–∏–Ω—è—Ç–∏–µ –ø–µ—Ä–≤–æ–π –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–ö',
              '–ü—Ä–∏–Ω—è—Ç–∏–µ –ó–∞–∫–æ–Ω–∞ –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –†–ö',
              '–°–æ–∑–¥–∞–Ω–∏–µ –°–ù–ì',
              '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ê–ª–∞—à—Å–∫–æ–π –∞–≤—Ç–æ–Ω–æ–º–∏–∏'
            ],
            correctAnswer: '–ü—Ä–∏–Ω—è—Ç–∏–µ –ó–∞–∫–æ–Ω–∞ –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –†–ö',
            explanation: '16 –¥–µ–∫–∞–±—Ä—è 1991 –≥–æ–¥–∞ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–∫–æ–Ω ¬´–û –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω¬ª.'
          },
          { 
            id: 3, 
            question: '–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω?',
            options: ['–ù. –ù–∞–∑–∞—Ä–±–∞–µ–≤', '–ö. –¢–æ–∫–∞–µ–≤', '–î. –ö—É–Ω–∞–µ–≤', '–ù. –ê–±–¥–∏–ª—å–¥–∏–Ω'],
            correctAnswer: '–ù. –ù–∞–∑–∞—Ä–±–∞–µ–≤',
            explanation: '–ù—É—Ä—Å—É–ª—Ç–∞–Ω –ù–∞–∑–∞—Ä–±–∞–µ–≤ –±—ã–ª –∏–∑–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–º –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω 1 –¥–µ–∫–∞–±—Ä—è 1991 –≥–æ–¥–∞.'
          },
          { 
            id: 4, 
            question: '–ö–æ–≥–¥–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –ø–µ—Ä–≤–∞—è –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞?',
            options: ['16 –¥–µ–∫–∞–±—Ä—è 1991 –≥–æ–¥–∞', '2 –º–∞—Ä—Ç–∞ 1992 –≥–æ–¥–∞', '28 —è–Ω–≤–∞—Ä—è 1993 –≥–æ–¥–∞', '30 –∞–≤–≥—É—Å—Ç–∞ 1995 –≥–æ–¥–∞'],
            correctAnswer: '28 —è–Ω–≤–∞—Ä—è 1993 –≥–æ–¥–∞',
            explanation: '–ü–µ—Ä–≤–∞—è –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ 28 —è–Ω–≤–∞—Ä—è 1993 –≥–æ–¥–∞. –î–µ–π—Å—Ç–≤—É—é—â–∞—è –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–ö –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ 30 –∞–≤–≥—É—Å—Ç–∞ 1995 –≥–æ–¥–∞.'
          },
          { 
            id: 5, 
            question: '–ö–∞–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –±—Ä–æ–Ω–∑–æ–≤–æ–≥–æ –≤–µ–∫–∞ –±—ã–ª–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞?',
            options: ['–ö–µ–ª—å—Ç–µ–º–∏–Ω–∞—Ä—Å–∫–∞—è', '–ê–Ω–¥—Ä–æ–Ω–æ–≤—Å–∫–∞—è', '–°–∫–∏—Ñ—Å–∫–∞—è', '–ú–æ–Ω–≥–æ–ª—å—Å–∫–∞—è'],
            correctAnswer: '–ê–Ω–¥—Ä–æ–Ω–æ–≤—Å–∫–∞—è',
            explanation: '–ê–Ω–¥—Ä–æ–Ω–æ–≤—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –±—ã–ª–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –≤ —ç–ø–æ—Ö—É –±—Ä–æ–Ω–∑—ã –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ (II —Ç—ã—Å. –¥–æ –Ω.—ç.).'
          }
        ];
      case 'reading':
        return [
          { 
            id: 1, 
            question: '–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞:\n\n–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–ò–ò) ‚Äì —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º —É—á–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–ª–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.',
            options: [
              '–ò–ò –Ω–µ —Å–ø–æ—Å–æ–±–µ–Ω –∫ –æ–±—É—á–µ–Ω–∏—é',
              '–ò–ò –º–æ–∂–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º',
              '–ò–ò –∑–∞–º–µ–Ω—è–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –≤–æ –≤—Å–µ—Ö —Å—Ñ–µ—Ä–∞—Ö',
              '–ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏'
            ],
            correctAnswer: '–ò–ò –º–æ–∂–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º',
            explanation: '–°–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—Å—Ç—É, –ò–ò —Å–ø–æ—Å–æ–±–µ–Ω –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º –∏ —É—á–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞.'
          },
          {
            id: 2,
            question: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å —Ç–µ–∫—Å—Ç–∞:\n\n–Ø–∑—ã–∫ ‚Äì –∂–∏–≤–∞—è —Å–∏—Å—Ç–µ–º–∞, –æ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è. –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è, —Å—Ç–∞—Ä—ã–µ —É—Ö–æ–¥—è—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è, –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è. –Ø–∑—ã–∫ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±—â–µ—Å—Ç–≤–µ –∏ –∫—É–ª—å—Ç—É—Ä–µ.',
            options: [
              '–Ø–∑—ã–∫ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è',
              '–Ø–∑—ã–∫ ‚Äì —ç—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
              '–Ø–∑—ã–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∏ –º–µ–Ω—è–µ—Ç—Å—è',
              '–Ø–∑—ã–∫ –Ω–µ —Å–≤—è–∑–∞–Ω —Å –æ–±—â–µ—Å—Ç–≤–æ–º'
            ],
            correctAnswer: '–Ø–∑—ã–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∏ –º–µ–Ω—è–µ—Ç—Å—è',
            explanation: '–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ —è–∑—ã–∫ —è–≤–ª—è–µ—Ç—Å—è –∂–∏–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è, –æ—Ç—Ä–∞–∂–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±—â–µ—Å—Ç–≤–µ –∏ –∫—É–ª—å—Ç—É—Ä–µ.'
          },
          {
            id: 3,
            question: '–ö–∞–∫–æ–π –≤—ã–≤–æ–¥ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞:\n\n–£—á–µ–Ω—ã–µ –∏–∑ –®–≤–µ—Ü–∏–∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏, —á—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —É–∫—Ä–µ–ø–ª—è–µ—Ç –º—ã—à—Ü—ã –∏ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É, –Ω–æ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∑–≥–∞, –æ—Å–æ–±–µ–Ω–Ω–æ —É –ª—é–¥–µ–π —Å—Ç–∞—Ä—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.',
            options: [
              '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª–µ–∑–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º—ã—à—Ü',
              '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª–µ–∑–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–ª–æ–¥—ã–º –ª—é–¥—è–º',
              '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —É–ª—É—á—à–∞—Ç—å —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞',
              '–®–≤–µ–¥—Å–∫–∏–µ —É—á–µ–Ω—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏ –º–æ–∑–≥–∞'
            ],
            correctAnswer: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —É–ª—É—á—à–∞—Ç—å —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞',
            explanation: '–°–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—Å—Ç—É, —É—á–µ–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏, —á—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∑–≥–∞, –æ—Å–æ–±–µ–Ω–Ω–æ —É –ø–æ–∂–∏–ª—ã—Ö –ª—é–¥–µ–π.'
          }
        ];
      case 'math_literacy':
        return [
          { 
            id: 1, 
            question: '–í –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–∫—Ü–∏—è: –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–≤—É—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Ç—Ä–µ—Ç–∏–π —Ç–æ–≤–∞—Ä (—Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∏–∑ —Ç—Ä–µ—Ö) –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞ –ø–æ–ª—Ü–µ–Ω—ã. –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ —Ç—Ä–∏ —Ç–æ–≤–∞—Ä–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 2000 —Ç–≥, 3000 —Ç–≥ –∏ 4000 —Ç–≥?',
            options: ['8000 —Ç–≥', '8500 —Ç–≥', '9000 —Ç–≥', '7000 —Ç–≥'],
            correctAnswer: '8000 —Ç–≥',
            explanation: '–î–≤–∞ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö —Ç–æ–≤–∞—Ä–∞ (4000 —Ç–≥ + 3000 —Ç–≥ = 7000 —Ç–≥) –ø–ª—é—Å –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (2000 —Ç–≥ √∑ 2 = 1000 —Ç–≥). –ò—Ç–æ–≥–æ: 7000 —Ç–≥ + 1000 —Ç–≥ = 8000 —Ç–≥'
          },
          { 
            id: 2, 
            question: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Ä–∞—Å—Ö–æ–¥—É–µ—Ç 8 –ª–∏—Ç—Ä–æ–≤ –±–µ–Ω–∑–∏–Ω–∞ –Ω–∞ 100 –∫–º –ø—É—Ç–∏. –°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –±–µ–Ω–∑–∏–Ω–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞ –ø—É—Ç—å –¥–ª–∏–Ω–æ–π 250 –∫–º?',
            options: ['15 –ª–∏—Ç—Ä–æ–≤', '20 –ª–∏—Ç—Ä–æ–≤', '25 –ª–∏—Ç—Ä–æ–≤', '30 –ª–∏—Ç—Ä–æ–≤'],
            correctAnswer: '20 –ª–∏—Ç—Ä–æ–≤',
            explanation: '–°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏—é: 8 –ª–∏—Ç—Ä–æ–≤ / 100 –∫–º = x –ª–∏—Ç—Ä–æ–≤ / 250 –∫–º. –û—Ç—Å—é–¥–∞ x = (8 √ó 250) / 100 = 20 –ª–∏—Ç—Ä–æ–≤.'
          },
          { 
            id: 3, 
            question: '–í–∫–ª–∞–¥—á–∏–∫ –ø–æ–ª–æ–∂–∏–ª –≤ –±–∞–Ω–∫ 200 000 —Ç–µ–Ω–≥–µ –ø–æ–¥ 10% –≥–æ–¥–æ–≤—ã—Ö. –°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –±—É–¥–µ—Ç –Ω–∞ —Å—á–µ—Ç—É —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∞ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –≥–æ–¥–∞ –Ω–∞ –≤—Å—é —Å—É–º–º—É –≤–∫–ª–∞–¥–∞?',
            options: ['220 000 —Ç–µ–Ω–≥–µ', '240 000 —Ç–µ–Ω–≥–µ', '242 000 —Ç–µ–Ω–≥–µ', '250 000 —Ç–µ–Ω–≥–µ'],
            correctAnswer: '242 000 —Ç–µ–Ω–≥–µ',
            explanation: '–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≥–æ–¥–∞: 200 000 + 200 000 √ó 0,1 = 220 000 —Ç–µ–Ω–≥–µ. –ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –≥–æ–¥–∞: 220 000 + 220 000 √ó 0,1 = 242 000 —Ç–µ–Ω–≥–µ.'
          }
        ];
      default:
        return []; // Other ENT subjects would be defined here
    }
  }
  
  // Regular subject questions adjusted by grade
  const difficultyFactor = Math.min(1, grade / 11); // Scale difficulty up to 11th grade
  
  switch (subject) {
    case 'math':
      // For younger students (1-4 grade)
      if (grade <= 4) {
        return [
          { 
            id: 1, 
            question: '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 5 + 3?', 
            options: ['7', '8', '9', '10'], 
            correctAnswer: '8',
            explanation: '5 + 3 = 8'
          },
          { 
            id: 2, 
            question: '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 10 - 4?', 
            options: ['4', '5', '6', '7'], 
            correctAnswer: '6',
            explanation: '10 - 4 = 6'
          },
          { 
            id: 3, 
            question: '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 3 √ó 2?', 
            options: ['5', '6', '7', '8'], 
            correctAnswer: '6',
            explanation: '3 √ó 2 = 6'
          }
        ];
      }
      // For middle grades (5-8)
      else if (grade <= 8) {
        return [
          { 
            id: 1, 
            question: '–ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: 2x + 3, –µ—Å–ª–∏ x = 5', 
            options: ['10', '12', '13', '15'], 
            correctAnswer: '13',
            explanation: '2x + 3 = 2 √ó 5 + 3 = 10 + 3 = 13'
          },
          { 
            id: 2, 
            question: '–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 3x - 6 = 15', 
            options: ['x = 5', 'x = 7', 'x = 8', 'x = 9'], 
            correctAnswer: 'x = 7',
            explanation: '3x - 6 = 15\n3x = 21\nx = 7'
          },
          { 
            id: 3, 
            question: '–í—ã—á–∏—Å–ª–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫–≤–∞–¥—Ä–∞—Ç–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–æ–π 6 —Å–º', 
            options: ['12 —Å–º¬≤', '24 —Å–º¬≤', '30 —Å–º¬≤', '36 —Å–º¬≤'], 
            correctAnswer: '36 —Å–º¬≤',
            explanation: '–ü–ª–æ—â–∞–¥—å –∫–≤–∞–¥—Ä–∞—Ç–∞ —Ä–∞–≤–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç—É –¥–ª–∏–Ω—ã –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—ã: S = a¬≤ = 6¬≤ = 36 —Å–º¬≤'
          },
          { 
            id: 4, 
            question: '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 20% –æ—Ç 80?', 
            options: ['8', '16', '20', '24'], 
            correctAnswer: '16',
            explanation: '20% –æ—Ç 80 = 80 √ó 0,2 = 16'
          }
        ];
      } 
      // For high school (9-11)
      else {
        return [
          { 
            id: 1, 
            question: '–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: log‚ÇÇ(x + 3) = 4', 
            options: ['x = 13', 'x = 16', 'x = 19', 'x = 15'], 
            correctAnswer: 'x = 13',
            explanation: 'log‚ÇÇ(x + 3) = 4\n2‚Å¥ = x + 3\n16 = x + 3\nx = 13'
          },
          { 
            id: 2, 
            question: '–ù–∞–π–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = 3x¬≤ + 2x - 5', 
            options: ['f\'(x) = 3x + 2', 'f\'(x) = 6x + 2', 'f\'(x) = 6x - 5', 'f\'(x) = 3x¬≤ + 2'], 
            correctAnswer: 'f\'(x) = 6x + 2',
            explanation: 'f\'(x) = (3x¬≤)\' + (2x)\' - (5)\' = 6x + 2 - 0 = 6x + 2'
          },
          { 
            id: 3, 
            question: '–£–ø—Ä–æ—Å—Ç–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: (2x + 3)(x - 2)', 
            options: ['2x¬≤ - 4x - 6', '2x¬≤ - x - 6', '2x¬≤ + x - 6', '2x¬≤ - x + 6'], 
            correctAnswer: '2x¬≤ - x - 6',
            explanation: '(2x + 3)(x - 2) = 2x(x - 2) + 3(x - 2) = 2x¬≤ - 4x + 3x - 6 = 2x¬≤ - x - 6'
          }
        ];
      }
      
    case 'physics':
      // Physics would have different questions based on grade
      if (grade <= 6) {
        return [
          { 
            id: 1, 
            question: '–ö–∞–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –º–∞—Å—Å—ã?', 
            options: ['–ú–µ—Ç—Ä', '–ö–∏–ª–æ–≥—Ä–∞–º–º', '–°–µ–∫—É–Ω–¥–∞', '–ù—å—é—Ç–æ–Ω'], 
            correctAnswer: '–ö–∏–ª–æ–≥—Ä–∞–º–º',
            explanation: '–ö–∏–ª–æ–≥—Ä–∞–º–º (–∫–≥) - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –º–∞—Å—Å—ã –≤ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –µ–¥–∏–Ω–∏—Ü (–°–ò).'
          },
          { 
            id: 2, 
            question: '–ß—Ç–æ –∏–∑–º–µ—Ä—è–µ—Ç —Ç–µ—Ä–º–æ–º–µ—Ç—Ä?', 
            options: ['–°–∫–æ—Ä–æ—Å—Ç—å', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É', '–ú–∞—Å—Å—É', '–í—Ä–µ–º—è'], 
            correctAnswer: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É',
            explanation: '–¢–µ—Ä–º–æ–º–µ—Ç—Ä - –ø—Ä–∏–±–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.'
          }
        ];
      } else {
        return [
          { 
            id: 1, 
            question: '–ö–∞–∫–æ–π —Ñ–æ—Ä–º—É–ª–æ–π –≤—ã—Ä–∞–∂–∞–µ—Ç—Å—è –∑–∞–∫–æ–Ω –û–º–∞ –¥–ª—è —É—á–∞—Å—Ç–∫–∞ —Ü–µ–ø–∏?', 
            options: ['I = U/R', 'I = U/P', 'I = P/U', 'I = R/U'], 
            correctAnswer: 'I = U/R',
            explanation: '–ó–∞–∫–æ–Ω –û–º–∞: I = U/R, –≥–¥–µ I - —Å–∏–ª–∞ —Ç–æ–∫–∞, U - –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, R - —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ.'
          },
          { 
            id: 2, 
            question: '–ö–∞–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤—ã—Ä–∞–∂–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é —Ç–µ–ª–∞, –ø–æ–¥–Ω—è—Ç–æ–≥–æ –Ω–∞–¥ –∑–µ–º–ª–µ–π?', 
            options: ['E = mgh', 'E = mv¬≤/2', 'E = mc¬≤', 'E = qU'], 
            correctAnswer: 'E = mgh',
            explanation: '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è —Ç–µ–ª–∞, –ø–æ–¥–Ω—è—Ç–æ–≥–æ –Ω–∞–¥ –∑–µ–º–ª–µ–π: E = mgh, –≥–¥–µ m - –º–∞—Å—Å–∞, g - —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è, h - –≤—ã—Å–æ—Ç–∞.'
          }
        ];
      }
      
    case 'history':
      // History questions
      if (grade <= 6) {
        return [
          { 
            id: 1, 
            question: '–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª—Å—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø–æ–ª–µ—Ç –Æ—Ä–∏—è –ì–∞–≥–∞—Ä–∏–Ω–∞?', 
            options: ['12 –∞–ø—Ä–µ–ª—è 1961 –≥–æ–¥–∞', '4 –æ–∫—Ç—è–±—Ä—è 1957 –≥–æ–¥–∞', '20 –∏—é–ª—è 1969 –≥–æ–¥–∞', '15 –¥–µ–∫–∞–±—Ä—è 1970 –≥–æ–¥–∞'], 
            correctAnswer: '12 –∞–ø—Ä–µ–ª—è 1961 –≥–æ–¥–∞',
            explanation: '–Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—ã–π –≤ –º–∏—Ä–µ –ø–æ–ª–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∫–æ—Å–º–æ—Å 12 –∞–ø—Ä–µ–ª—è 1961 –≥–æ–¥–∞.'
          }
        ];
      } else {
        return [
          { 
            id: 1, 
            question: '–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–∏–µ –ö–µ–Ω–µ—Å–∞—Ä—ã –ö–∞—Å—ã–º–æ–≤–∞?', 
            options: ['1837-1847 –≥–≥.', '1822-1824 –≥–≥.', '1916-1917 –≥–≥.', '1867-1868 –≥–≥.'], 
            correctAnswer: '1837-1847 –≥–≥.',
            explanation: '–í–æ—Å—Å—Ç–∞–Ω–∏–µ –ø–æ–¥ –ø—Ä–µ–¥–≤–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º –ö–µ–Ω–µ—Å–∞—Ä—ã –ö–∞—Å—ã–º–æ–≤–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –≤ 1837-1847 –≥–æ–¥–∞—Ö.'
          },
          { 
            id: 2, 
            question: '–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º –∫–∞–∑–∞—Ö—Å–∫–∏–º —É—á–µ–Ω—ã–º, —Å—Ç–∞–≤—à–∏–º —á–ª–µ–Ω–æ–º-–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –ê–∫–∞–¥–µ–º–∏–∏ –Ω–∞—É–∫?', 
            options: ['–ß–æ–∫–∞–Ω –í–∞–ª–∏—Ö–∞–Ω–æ–≤', '–ê–±–∞–π –ö—É–Ω–∞–Ω–±–∞–µ–≤', '–ò–±—Ä–∞–π –ê–ª—Ç—ã–Ω—Å–∞—Ä–∏–Ω', '–ú—É—Ö—Ç–∞—Ä –ê—É—ç–∑–æ–≤'], 
            correctAnswer: '–ß–æ–∫–∞–Ω –í–∞–ª–∏—Ö–∞–Ω–æ–≤',
            explanation: '–ß–æ–∫–∞–Ω –í–∞–ª–∏—Ö–∞–Ω–æ–≤ (1835-1865) –±—ã–ª –ø–µ—Ä–≤—ã–º –∫–∞–∑–∞—Ö—Å–∫–∏–º —É—á–µ–Ω—ã–º, –∏–∑–±—Ä–∞–Ω–Ω—ã–º —á–ª–µ–Ω–æ–º-–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –ê–∫–∞–¥–µ–º–∏–∏ –Ω–∞—É–∫.'
          }
        ];
      }
    
    // Other subjects would follow the same pattern
    default:
      return [];
  }
};

// Quest Battle Component for curriculum or ENT tests
const QuestBattleComponent = ({ subject, subjectName, icon: Icon, color, grade, isENT, onComplete }) => {
  const [battleStarted, setBattleStarted] = useState(false);
  const [opponent, setOpponent] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [userScore, setUserScore] = useState(0);
  const [opponentScore, setOpponentScore] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [showExplanation, setShowExplanation] = useState(false);
  const [timeLeft, setTimeLeft] = useState(30);
  const [gameCompleted, setGameCompleted] = useState(false);
  const [userWon, setUserWon] = useState(false);
  const [drawGame, setDrawGame] = useState(false);

  useEffect(() => {
    // Select a random opponent similar to user's grade
    const eligibleOpponents = MOCK_OPPONENTS.filter(op => Math.abs(op.grade - grade) <= 1);
    const randomOpponent = eligibleOpponents.length > 0 
      ? eligibleOpponents[Math.floor(Math.random() * eligibleOpponents.length)]
      : MOCK_OPPONENTS[Math.floor(Math.random() * MOCK_OPPONENTS.length)];
    
    setOpponent(randomOpponent);

    // Get questions based on subject and grade/ENT status
    setQuestions(getQuestions(subject, grade, isENT));
  }, [subject, grade, isENT]);

  useEffect(() => {
    if (battleStarted && !gameCompleted) {
      // Countdown timer
      const timer = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 1) {
            clearInterval(timer);
            handleTimeUp();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [battleStarted, currentQuestionIndex, gameCompleted]);

  // Simulate opponent's progress
  useEffect(() => {
    if (battleStarted && opponent && !gameCompleted) {
      // Random intervals for opponent to "answer" questions
      // Adjust difficulty based on opponent's level - higher level means faster answers
      const baseSpeed = 5000; // Base speed in milliseconds
      const levelFactor = 1 - (opponent.level / 10); // Level factor (0.3 to 0.7)
      const opponentSpeed = baseSpeed * levelFactor + 2000; // 2-7 seconds between answers
      
      const opponentInterval = setInterval(() => {
        if (opponentScore < 5) {
          setOpponentScore((prev) => {
            const newScore = prev + 1;
            
            // Check if opponent won
            if (newScore >= 5) {
              setGameCompleted(true);
              setUserWon(false);
              clearInterval(opponentInterval);
            }
            
            // Check for a draw
            if (newScore === 4 && userScore === 4) {
              // Both players need one more point - chance for a draw
              const chanceOfDraw = Math.random() < 0.3; // 30% chance
              if (chanceOfDraw) {
                setGameCompleted(true);
                setDrawGame(true);
                clearInterval(opponentInterval);
              }
            }
            
            return newScore;
          });
        }
      }, opponentSpeed);

      return () => clearInterval(opponentInterval);
    }
  }, [battleStarted, opponent, opponentScore, gameCompleted, userScore]);

  const handleStartBattle = () => {
    setBattleStarted(true);
    setTimeLeft(30);
  };

  const handleAnswer = (answer) => {
    setSelectedAnswer(answer);
    const currentQuestion = questions[currentQuestionIndex];
    
    if (answer === currentQuestion.correctAnswer) {
      // Correct answer
      setUserScore((prev) => {
        const newScore = prev + 1;
        
        // Check if user won
        if (newScore >= 5) {
          setGameCompleted(true);
          setUserWon(true);
        }
        
        return newScore;
      });
    }
    
    setShowExplanation(true);
    
    // Move to next question after a short delay
    setTimeout(() => {
      setShowExplanation(false);
      setSelectedAnswer(null);
      
      if (currentQuestionIndex < questions.length - 1) {
        setCurrentQuestionIndex((prev) => prev + 1);
        setTimeLeft(30); // Reset timer for next question
      } else {
        // Loop back to first question
        setCurrentQuestionIndex(0);
        setTimeLeft(30);
      }
    }, 2000);
  };

  const handleTimeUp = () => {
    setShowExplanation(true);
    
    // Move to next question after showing explanation
    setTimeout(() => {
      setShowExplanation(false);
      
      if (currentQuestionIndex < questions.length - 1) {
        setCurrentQuestionIndex((prev) => prev + 1);
        setTimeLeft(30); // Reset timer for next question
      } else {
        // Loop back to first question
        setCurrentQuestionIndex(0);
        setTimeLeft(30);
      }
    }, 2000);
  };

  const handlePlayAgain = () => {
    setUserScore(0);
    setOpponentScore(0);
    setCurrentQuestionIndex(0);
    setGameCompleted(false);
    setBattleStarted(false);
    setTimeLeft(30);
    setShowExplanation(false);
    setDrawGame(false);
    
    // Select a new random opponent
    const eligibleOpponents = MOCK_OPPONENTS.filter(op => Math.abs(op.grade - grade) <= 1);
    const randomOpponent = eligibleOpponents.length > 0 
      ? eligibleOpponents[Math.floor(Math.random() * eligibleOpponents.length)]
      : MOCK_OPPONENTS[Math.floor(Math.random() * MOCK_OPPONENTS.length)];
    
    setOpponent(randomOpponent);
  };

  if (!battleStarted) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Icon className={`mr-2 ${color.split(' ')[0]}`} size={20} />
            <span>–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏–π: {subjectName}</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-6">
            <div className={`mx-auto w-20 h-20 ${color} rounded-full flex items-center justify-center mb-4`}>
              <Icon size={40} />
            </div>
            <h3 className="text-xl font-bold text-gray-900 mb-2">
              –°—Ä–∞–∑–∏—Å—å –≤ {isENT ? '–ï–ù–¢' : '—É—á–µ–±–Ω–æ–π'} –¥—É—ç–ª–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subjectName}!
            </h3>
            <p className="text-gray-600 mb-6 max-w-md mx-auto">
              –†–µ—à–∞–π –∑–∞–¥–∞—á–∏ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º —Ç–≤–æ–π –æ–ø–ø–æ–Ω–µ–Ω—Ç! –ö—Ç–æ –ø–µ—Ä–≤—ã–º —Ä–µ—à–∏—Ç 5 –∑–∞–¥–∞—á –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ—Ç –∏ –ø–æ–±–µ–¥–∏–ª!
            </p>
            
            {opponent && (
              <div className="mb-6 p-4 bg-blue-50 rounded-lg inline-block">
                <p className="text-lg font-bold text-blue-800 mb-2">
                  –¢–≤–æ–π –æ–ø–ø–æ–Ω–µ–Ω—Ç: {opponent.avatar} {opponent.name}
                </p>
                <p className="text-sm text-blue-600">
                  {opponent.grade} –∫–ª–∞—Å—Å ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {opponent.level}
                </p>
              </div>
            )}
            
            <div className="space-y-3">
              <Button
                variant="primary"
                size="lg"
                onClick={handleStartBattle}
                leftIcon={<Zap size={18} />}
              >
                –ù–∞—á–∞—Ç—å —Å—Ä–∞–∂–µ–Ω–∏–µ
              </Button>
              
              <Button
                variant="outline"
                onClick={onComplete}
              >
                –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (gameCompleted) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Icon className={`mr-2 ${color.split(' ')[0]}`} size={20} />
            <span>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∂–µ–Ω–∏—è: {subjectName}</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-6">
            <div className={`mx-auto w-20 h-20 ${
              userWon ? 'bg-green-100' : (drawGame ? 'bg-amber-100' : 'bg-red-100')
            } rounded-full flex items-center justify-center mb-4`}>
              {userWon ? (
                <Trophy size={40} className="text-green-600" />
              ) : drawGame ? (
                <Award size={40} className="text-amber-600" />
              ) : (
                <XCircle size={40} className="text-red-600" />
              )}
            </div>
            <h3 className="text-xl font-bold text-gray-900 mb-2">
              {userWon 
                ? '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!' 
                : drawGame 
                  ? '–ù–∏—á—å—è! –í—ã –æ–±–∞ –º–æ–ª–æ–¥—Ü—ã!' 
                  : '–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å!'}
            </h3>
            <p className="text-gray-600 mb-6">
              {userWon 
                ? `–¢—ã —Ä–µ—à–∏–ª(–∞) 5 –∑–∞–¥–∞–Ω–∏–π –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º ${opponent.name}!` 
                : drawGame
                  ? `–¢—ã –∏ ${opponent.name} –ø–æ–∫–∞–∑–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!`
                  : `${opponent.name} –æ–∫–∞–∑–∞–ª—Å—è –±—ã—Å—Ç—Ä–µ–µ. –ù–µ —Å–¥–∞–≤–∞–π—Å—è!`}
            </p>
            
            <div className="flex justify-center space-x-8 mb-8">
              <div className="text-center">
                <p className="text-sm text-gray-500">–¢–≤–æ–π —Å—á–µ—Ç</p>
                <p className="text-3xl font-bold text-blue-600">{userScore}</p>
              </div>
              <div className="text-center">
                <p className="text-sm text-gray-500">–°—á–µ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞</p>
                <p className="text-3xl font-bold text-red-600">{opponentScore}</p>
              </div>
            </div>
            
            <div className="space-y-4">
              <Button
                variant="primary"
                onClick={handlePlayAgain}
                leftIcon={<Zap size={18} />}
              >
                –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
              </Button>
              
              <Button
                variant="outline"
                onClick={onComplete}
              >
                –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  const currentQuestion = questions[currentQuestionIndex];
  
  // If no questions available for this subject/grade
  if (!currentQuestion) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Icon className={`mr-2 ${color.split(' ')[0]}`} size={20} />
            <span>–ü—Ä–µ–¥–º–µ—Ç: {subjectName}</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-6">
            <div className={`mx-auto w-20 h-20 ${color} rounded-full flex items-center justify-center mb-4`}>
              <HelpCircle size={40} />
            </div>
            <h3 className="text-xl font-bold text-gray-900 mb-2">
              –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </h3>
            <p className="text-gray-600 mb-6">
              –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.
            </p>
            
            <Button
              variant="primary"
              onClick={onComplete}
            >
              –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }
  
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center">
            <Icon className={`mr-2 ${color.split(' ')[0]}`} size={20} />
            <span>{isENT ? '–ï–ù–¢' : '–°—Ä–∞–∂–µ–Ω–∏–µ'}: {subjectName}</span>
          </div>
          <div className="flex items-center space-x-4">
            <div className="flex items-center text-blue-600">
              <span className="font-bold text-lg mr-1">{userScore}</span>
              <Users size={16} />
            </div>
            <span className="text-gray-400">vs</span>
            <div className="flex items-center text-red-600">
              <span className="font-bold text-lg mr-1">{opponentScore}</span>
              <span>{opponent?.avatar}</span>
            </div>
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="mb-4 flex items-center justify-between">
          <p className="text-sm text-gray-500">–í–æ–ø—Ä–æ—Å {currentQuestionIndex + 1} –∏–∑ {questions.length}</p>
          <div className="flex items-center">
            <Clock size={16} className="text-amber-600 mr-1" />
            <span className={`font-medium ${timeLeft < 10 ? 'text-red-600' : 'text-gray-700'}`}>
              {timeLeft} —Å–µ–∫
            </span>
          </div>
        </div>
        
        <div className={`p-4 rounded-lg mb-4 ${showExplanation ? 'bg-blue-50 border border-blue-200' : 'bg-gray-50'}`}>
          <h3 className="text-lg font-medium text-gray-900 mb-4">{currentQuestion.question}</h3>
          
          {!showExplanation ? (
            <div className="grid grid-cols-2 gap-3">
              {currentQuestion.options.map((option) => (
                <button
                  key={option}
                  className={`p-3 rounded-lg border text-left transition-colors ${
                    selectedAnswer === option 
                      ? 'border-blue-500 bg-blue-50' 
                      : 'border-gray-200 hover:border-gray-300 hover:bg-gray-100'
                  }`}
                  onClick={() => handleAnswer(option)}
                  disabled={selectedAnswer !== null}
                >
                  {option}
                </button>
              ))}
            </div>
          ) : (
            <div className="p-3 bg-white rounded-lg border border-blue-200">
              <div className="flex items-start space-x-2">
                {selectedAnswer === currentQuestion.correctAnswer ? (
                  <CheckCircle size={20} className="text-green-600 mt-0.5 flex-shrink-0" />
                ) : (
                  <XCircle size={20} className="text-red-600 mt-0.5 flex-shrink-0" />
                )}
                <div>
                  <p className="font-medium text-gray-900 mb-1">
                    {selectedAnswer === currentQuestion.correctAnswer 
                      ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' 
                      : `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentQuestion.correctAnswer}`}
                  </p>
                  <p className="text-gray-700">{currentQuestion.explanation}</p>
                </div>
              </div>
            </div>
          )}
        </div>
        
        <div className="bg-amber-50 border border-amber-200 rounded-lg p-3">
          <div className="flex items-start space-x-2">
            <div className="mt-0.5">
              <span className="text-2xl">{opponent?.avatar}</span>
            </div>
            <div>
              <p className="font-medium text-gray-900">{opponent?.name} —Å–µ–π—á–∞—Å —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É...</p>
              <div className="mt-2 flex space-x-1">
                <span className="animate-pulse">‚åõ</span>
                <span className="animate-pulse delay-100">‚åõ</span>
                <span className="animate-pulse delay-200">‚åõ</span>
              </div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

// Main Quest Component
const EducationalQuestsComponent = () => {
  const [activeSection, setActiveSection] = useState('subjects'); // 'subjects', 'ent', 'kids'
  const [selectedSubject, setSelectedSubject] = useState(null);
  const [gameStarted, setGameStarted] = useState(false);
  
  const user = useUserStore(state => state.user);
  const userGrade = user?.grade || 9; // Default to 9th grade if not specified
  
  // Determine if showing ENT options (only for 9-11 grades)
  const showENT = userGrade >= 9;
  
  const handleStartGame = (subject, isENT = false) => {
    setSelectedSubject({
      id: subject.id,
      name: subject.name,
      icon: subject.icon,
      color: subject.color,
      isENT: isENT
    });
    setGameStarted(true);
  };
  
  const handleBackToMenu = () => {
    setGameStarted(false);
    setSelectedSubject(null);
  };
  
  if (gameStarted && selectedSubject) {
    return (
      <div className="space-y-6">
        <QuestBattleComponent 
          subject={selectedSubject.id}
          subjectName={selectedSubject.name}
          icon={selectedSubject.icon}
          color={selectedSubject.color}
          grade={userGrade}
          isENT={selectedSubject.isENT}
          onComplete={handleBackToMenu}
        />
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      <div className="flex space-x-2 mb-6">
        <Button
          variant={activeSection === 'subjects' ? 'primary' : 'outline'}
          onClick={() => setActiveSection('subjects')}
        >
          –®–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        </Button>
        
        {showENT && (
          <Button
            variant={activeSection === 'ent' ? 'primary' : 'outline'}
            onClick={() => setActiveSection('ent')}
          >
            –¢–µ—Å—Ç—ã –ï–ù–¢
          </Button>
        )}
        
        {userGrade <= 4 && (
          <Button
            variant={activeSection === 'kids' ? 'primary' : 'outline'}
            onClick={() => setActiveSection('kids')}
          >
            –û–±—É—á–∞—é—â–∏–µ –∏–≥—Ä—ã
          </Button>
        )}
      </div>
      
      {activeSection === 'subjects' && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Trophy className="mr-2 text-amber-600" size={20} />
              <span>–£—á–µ–±–Ω—ã–µ —Å—Ä–∞–∂–µ–Ω–∏—è</span>
            </CardTitle>
            <CardDescription>
              –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏ —Å—Ä–∞–∑–∏—Ç–µ—Å—å —Å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞–º–∏ –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –¥—É—ç–ª–∏!
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
              {SUBJECTS.map((subject) => (
                <button
                  key={subject.id}
                  className="flex flex-col items-center text-center p-6 rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-colors"
                  onClick={() => handleStartGame(subject)}
                >
                  <div className={`flex h-16 w-16 items-center justify-center rounded-full ${subject.color} mb-4`}>
                    <subject.icon size={32} />
                  </div>
                  <h3 className="font-medium text-gray-900">{subject.name}</h3>
                  <p className="text-sm text-gray-500 mt-1">
                    –°—Ä–∞–∑–∏—Å—å –≤ –±–∏—Ç–≤–µ –∑–Ω–∞–Ω–∏–π
                  </p>
                </button>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
      
      {activeSection === 'ent' && showENT && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <GraduationCap className="mr-2 text-blue-600" size={20} />
              <span>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ù–¢</span>
            </CardTitle>
            <CardDescription>
              –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ï–ù–¢ –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º–∏
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
              {ENT_SUBJECTS.map((subject) => (
                <button
                  key={subject.id}
                  className="flex flex-col items-center text-center p-6 rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-colors"
                  onClick={() => handleStartGame(subject, true)}
                >
                  <div className={`flex h-16 w-16 items-center justify-center rounded-full ${subject.color} mb-4`}>
                    <subject.icon size={32} />
                  </div>
                  <h3 className="font-medium text-gray-900">{subject.name}</h3>
                  <p className="text-sm text-gray-500 mt-1">
                    –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ù–¢
                  </p>
                </button>
              ))}
              
              {/* Add profile subjects if the user has them */}
              {user?.profileSubjects?.map((subject, index) => (
                <button
                  key={`profile-${index}`}
                  className="flex flex-col items-center text-center p-6 rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-colors"
                  onClick={() => handleStartGame({ 
                    id: `profile-${index}`, 
                    name: subject,
                    icon: Brain,
                    color: 'text-emerald-600 bg-emerald-100'
                  }, true)}
                >
                  <div className="flex h-16 w-16 items-center justify-center rounded-full text-emerald-600 bg-emerald-100 mb-4">
                    <Brain size={32} />
                  </div>
                  <h3 className="font-medium text-gray-900">{subject}</h3>
                  <p className="text-sm text-gray-500 mt-1">
                    –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
                  </p>
                </button>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
      
      {activeSection === 'kids' && userGrade <= 4 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Smile className="mr-2 text-green-600" size={20} />
              <span>–û–±—É—á–∞—é—â–∏–µ –∏–≥—Ä—ã</span>
            </CardTitle>
            <CardDescription>
              –ò–≥—Ä–∞–π –∏ —É—á–∏—Å—å —Å —ç—Ç–∏–º–∏ –≤–µ—Å–µ–ª—ã–º–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏!
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <button
                className="flex flex-col items-center text-center p-6 rounded-lg border border-gray-200 hover:border-amber-300 hover:bg-amber-50 transition-colors"
                onClick={() => handleStartGame({
                  id: 'counting-stars',
                  name: '–°—á–µ—Ç –∑–≤–µ–∑–¥',
                  icon: Star,
                  color: 'text-amber-600 bg-amber-100'
                })}
              >
                <div className="flex h-16 w-16 items-center justify-center rounded-full text-amber-600 bg-amber-100 mb-4">
                  <Star size={32} />
                </div>
                <h3 className="font-medium text-gray-900">–°—á–µ—Ç –∑–≤–µ–∑–¥</h3>
                <p className="text-sm text-gray-500 mt-1">
                  –ü–æ—Å—á–∏—Ç–∞–π –∑–≤–µ–∑–¥—ã –Ω–∞ –Ω–µ–±–µ –∏ –≤—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                </p>
              </button>
              
              <button
                className="flex flex-col items-center text-center p-6 rounded-lg border border-gray-200 hover:border-red-300 hover:bg-red-50 transition-colors"
                onClick={() => handleStartGame({
                  id: 'word-match',
                  name: '–°–æ–µ–¥–∏–Ω–∏ —Å–ª–æ–≤–∞',
                  icon: Heart,
                  color: 'text-red-600 bg-red-100'
                })}
              >
                <div className="flex h-16 w-16 items-center justify-center rounded-full text-red-600 bg-red-100 mb-4">
                  <Heart size={32} />
                </div>
                <h3 className="font-medium text-gray-900">–°–æ–µ–¥–∏–Ω–∏ —Å–ª–æ–≤–∞</h3>
                <p className="text-sm text-gray-500 mt-1">
                  –°–æ–µ–¥–∏–Ω–∏ —Å–ª–æ–≤–∞ —Å –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                </p>
              </button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default EducationalQuestsComponent;